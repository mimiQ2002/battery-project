import os
import time
import cv2
import torch
from collections import Counter
from ultralytics import YOLO

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏ò‡πÇ‡∏°‡πÄ‡∏î‡∏• ---
model_path = r"E:\Project S\YOLOv11\runs\detect\train22\weights\best.pt"
if not os.path.exists(model_path):
    raise FileNotFoundError(f"Model file not found at: {model_path}")

# --- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î device ---
model = YOLO(model_path)
device = "cuda" if torch.cuda.is_available() else "cpu"
model.to(device)
print(f"Using device: {device}")

# --- ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á ---
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    raise RuntimeError("Failed to open webcam.")
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

try:
    print("Starting real-time split detection... Press Ctrl+C to stop.")
    while True:
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° list ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‚Äì‡∏Ç‡∏ß‡∏≤
        left_names = []
        right_names = []

        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö window 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        window_start = time.time()
        while time.time() - window_start < 2:
            ret, frame = cap.read()
            if not ret:
                continue

            # ‡πÅ‡∏ö‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ã‡πâ‡∏≤‡∏¢‚Äì‡∏Ç‡∏ß‡∏≤
            h, w, _ = frame.shape
            mid = w // 2
            left_frame  = frame[:, :mid]
            right_frame = frame[:, mid:]

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢
            try:
                res_left = model(left_frame)
                boxes_left = res_left[0].boxes.data.cpu().numpy()
                for det in boxes_left:
                    cls_id = int(det[5])
                    left_names.append(model.names[cls_id])
            except Exception as e:
                print("Left detect error:", e)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤
            try:
                res_right = model(right_frame)
                boxes_right = res_right[0].boxes.data.cpu().numpy()
                for det in boxes_right:
                    cls_id = int(det[5])
                    right_names.append(model.names[cls_id])
            except Exception as e:
                print("Right detect error:", e)

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢
        if left_names:
            most_left, cnt_left = Counter(left_names).most_common(1)[0]
            print(f"üîç Left side: {most_left} ({cnt_left} times)")
        else:
            print("‚ùå Left side: No detections")

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤
        if right_names:
            most_right, cnt_right = Counter(right_names).most_common(1)[0]
            print(f"üîç Right side: {most_right} ({cnt_right} times)")
        else:
            print("‚ùå Right side: No detections")

        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÅ‡∏•‡∏∞‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

except KeyboardInterrupt:
    print("\nStopping...")

finally:
    cap.release()
    cv2.destroyAllWindows()
    print("Resources released. Program terminated.")
